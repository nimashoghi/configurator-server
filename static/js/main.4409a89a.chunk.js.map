{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["baseUrl","concat","window","CONFIGURATOR_HOST","getInitialSettings","_callee3","passcode","response","regenerator_default","a","wrap","_context3","prev","next","fetch","sent","json","abrupt","stop","updateSettings","_callee4","settings","_context4","method","headers","Content-Type","body","JSON","stringify","t0","ok","t1","success","alert","usePasscode","_useLocalStorage","key","initialValue","_useState","useState","item","localStorage","getItem","parse","error","console","log","_useState2","Object","slicedToArray","storedValue","setStoredValue","value","valueToStore","Function","setItem","removeItem","useLocalStorage","_useLocalStorage2","setPasscode","removePasscode","useEffect","prompt","App","_usePasscode","_usePasscode2","_useSettingsWithIniti","_useState3","_useState4","initialSettings","setInitialSettings","asyncToGenerator","mark","_callee","_context","useSettingsWithInitial","_useSettingsWithIniti2","setSettings","react_default","createElement","className","lib_default","schema","CONFIGURATOR_SCHEMA","formData","onChange","_ref2","onSubmit","_ref4","_callee2","_ref3","_context2","_x4","apply","this","arguments","onError","e","style","display","justifyContent","type","onClick","document","location","reload","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4409a89a.chunk.js","sourcesContent":["import {JSONSchema6} from \"json-schema\"\nimport React, {useEffect, useState} from \"react\"\nimport Form from \"react-jsonschema-form\"\nimport \"./App.css\"\nimport {Settings} from \"./types\"\n\nfunction getUrl() {\n    return (window as any).CONFIGURATOR_HOST || \"localhost:5000\"\n}\nfunction getSchema() {\n    return JSON.parse((window as any).CONFIGURATOR_SCHEMA || \"{}\")\n}\nconst baseUrl = `http://${getUrl()}/settings`\n\nasync function getInitialSettings(passcode: string): Promise<Settings> {\n    const response = await fetch(`${baseUrl}/${passcode}`)\n    return await response.json()\n}\n\nasync function updateSettings(passcode: string, settings: Settings) {\n    const response = await fetch(`${baseUrl}/${passcode}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(settings)\n    })\n    if (response.ok && (await response.json()).success === true) {\n        alert(\"Successfully updated settings\")\n    } else {\n        alert(\"Failed to update settings...\")\n    }\n}\n\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n    const [storedValue, setStoredValue] = useState<T>(() => {\n        try {\n            const item = window.localStorage.getItem(key)\n            return item ? JSON.parse(item) : initialValue\n        } catch (error) {\n            console.log(error)\n            return initialValue\n        }\n    })\n\n    const removeItem = () => window.localStorage.removeItem(key)\n\n    const setValue = (value: T | ((initial: T) => T)) => {\n        try {\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value\n            setStoredValue(valueToStore)\n            window.localStorage.setItem(key, JSON.stringify(valueToStore))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return [storedValue, setValue, removeItem] as const\n}\n\nfunction usePasscode() {\n    const [passcode, setPasscode, removePasscode] = useLocalStorage(\n        \"passcode\",\n        \"\"\n    )\n\n    useEffect(() => {\n        if (!passcode) {\n            setPasscode(prompt(\"Please enter your passcode here\") || \"\")\n        }\n    }, [passcode, setPasscode])\n\n    return [passcode, removePasscode] as const\n}\n\nfunction useSettingsWithInitial(passcode: string) {\n    const [initialSettings, setInitialSettings] = useState<Settings>()\n    useEffect(() => {\n        ;(async () => {\n            setInitialSettings(await getInitialSettings(passcode))\n        })()\n    }, [passcode])\n    return [initialSettings, setInitialSettings] as const\n}\n\nconst App: React.FC = () => {\n    const [passcode, removePasscode] = usePasscode()\n    const [settings, setSettings] = useSettingsWithInitial(passcode)\n    if (!passcode || !settings) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <div className=\"formContainer\">\n            <div className=\"form\">\n                <Form<Settings>\n                    schema={getSchema() as JSONSchema6}\n                    formData={settings!}\n                    onChange={({formData}) => setSettings(formData)}\n                    onSubmit={async ({formData}) =>\n                        await updateSettings(passcode, formData)\n                    }\n                    onError={e => {\n                        alert(\n                            \"Could not validate form. Check console for more information.\"\n                        )\n                        console.error(e)\n                    }}>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\"\n                        }}>\n                        <button className=\"btn btn-success\" type=\"submit\">\n                            Submit\n                        </button>\n                        <button\n                            className=\"btn btn-danger\"\n                            onClick={() => {\n                                removePasscode()\n                                document.location.reload()\n                            }}>\n                            Logout\n                        </button>\n                    </div>\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}